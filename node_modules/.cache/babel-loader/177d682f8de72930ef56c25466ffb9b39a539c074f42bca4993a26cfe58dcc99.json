{"ast":null,"code":"const apiUrl = 'http://localhost:8080/blueprints'; // Backend de Spring Boot\n\n// Función para obtener los planos de un autor específico\nexport const getBlueprintsByAuthor = async author => {\n  try {\n    const response = await fetch(`${apiUrl}/${author}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener los planos');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","getBlueprintsByAuthor","author","response","fetch","ok","Error","data","json","error","console"],"sources":["C:/Users/laura/Music/ARSW/LAB_6-ARSW/blueprints-client/src/services/apiService.js"],"sourcesContent":["const apiUrl = 'http://localhost:8080/blueprints'; // Backend de Spring Boot\n\n// Función para obtener los planos de un autor específico\nexport const getBlueprintsByAuthor = async (author) => {\n  try {\n    const response = await fetch(`${apiUrl}/${author}`);\n    if (!response.ok) {\n      throw new Error('Error al obtener los planos');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kCAAkC,CAAC,CAAC;;AAEnD;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,MAAM,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,MAAM,IAAIE,MAAM,EAAE,CAAC;IACnD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}