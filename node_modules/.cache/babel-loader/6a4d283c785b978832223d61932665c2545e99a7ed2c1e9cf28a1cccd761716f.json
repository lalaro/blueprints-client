{"ast":null,"code":"const mockdata = {\n  \"johnconnor\": [{\n    author: \"johnconnor\",\n    points: [{\n      x: 150,\n      y: 120\n    }, {\n      x: 215,\n      y: 115\n    }],\n    name: \"house\"\n  }, {\n    author: \"johnconnor\",\n    points: [{\n      x: 340,\n      y: 240\n    }, {\n      x: 15,\n      y: 215\n    }],\n    name: \"gear\"\n  }],\n  \"maryweyland\": [{\n    author: \"maryweyland\",\n    points: [{\n      x: 140,\n      y: 140\n    }, {\n      x: 115,\n      y: 115\n    }],\n    name: \"house2\"\n  }, {\n    author: \"maryweyland\",\n    points: [{\n      x: 140,\n      y: 140\n    }, {\n      x: 115,\n      y: 115\n    }],\n    name: \"gear2\"\n  }]\n};\n\n// Función de prueba para obtener los planos del autor\nexport const getBlueprintsByAuthor = async author => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const blueprints = mockdata[author];\n      if (blueprints) {\n        resolve(blueprints);\n      } else {\n        reject('No se encontraron planos para este autor');\n      }\n    }, 500); // Simula un retraso en la respuesta\n  });\n};","map":{"version":3,"names":["mockdata","author","points","x","y","name","getBlueprintsByAuthor","Promise","resolve","reject","setTimeout","blueprints"],"sources":["C:/Users/laura/Music/ARSW/LAB_6-ARSW/blueprints-client/src/services/apiService.js"],"sourcesContent":["const mockdata = {\n  \"johnconnor\": [\n    {author: \"johnconnor\", points: [{x: 150, y: 120}, {x: 215, y: 115}], name: \"house\"},\n    {author: \"johnconnor\", points: [{x: 340, y: 240}, {x: 15, y: 215}], name: \"gear\"}\n  ],\n  \"maryweyland\": [\n    {author: \"maryweyland\", points: [{x: 140, y: 140}, {x: 115, y: 115}], name: \"house2\"},\n    {author: \"maryweyland\", points: [{x: 140, y: 140}, {x: 115, y: 115}], name: \"gear2\"}\n  ]\n};\n\n// Función de prueba para obtener los planos del autor\nexport const getBlueprintsByAuthor = async (author) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const blueprints = mockdata[author];\n      if (blueprints) {\n        resolve(blueprints);\n      } else {\n        reject('No se encontraron planos para este autor');\n      }\n    }, 500); // Simula un retraso en la respuesta\n  });\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;EACf,YAAY,EAAE,CACZ;IAACC,MAAM,EAAE,YAAY;IAAEC,MAAM,EAAE,CAAC;MAACC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,EAAE;MAACD,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACnF;IAACJ,MAAM,EAAE,YAAY;IAAEC,MAAM,EAAE,CAAC;MAACC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,EAAE;MAACD,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAG,CAAC,CAAC;IAAEC,IAAI,EAAE;EAAM,CAAC,CAClF;EACD,aAAa,EAAE,CACb;IAACJ,MAAM,EAAE,aAAa;IAAEC,MAAM,EAAE,CAAC;MAACC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,EAAE;MAACD,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACrF;IAACJ,MAAM,EAAE,aAAa;IAAEC,MAAM,EAAE,CAAC;MAACC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,EAAE;MAACD,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAG,CAAC,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC;AAExF,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAOL,MAAM,IAAK;EACrD,OAAO,IAAIM,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,MAAMC,UAAU,GAAGX,QAAQ,CAACC,MAAM,CAAC;MACnC,IAAIU,UAAU,EAAE;QACdH,OAAO,CAACG,UAAU,CAAC;MACrB,CAAC,MAAM;QACLF,MAAM,CAAC,0CAA0C,CAAC;MACpD;IACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}