{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laura\\\\Music\\\\ARSW\\\\LAB_6-ARSW\\\\blueprints-client\\\\src\\\\components\\\\BlueprintCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport '../css/BlueprintCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlueprintCanvas = ({\n  blueprint\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    console.log('Dibujando el plano:', blueprint); // Verifica que blueprint tenga datos\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Establecer el color y el ancho de la línea\n    context.strokeStyle = 'black';\n    context.lineWidth = 2;\n\n    // Comenzar a dibujar\n    if (blueprint && blueprint.points && blueprint.points.length > 0) {\n      context.beginPath();\n      const points = blueprint.points;\n\n      // Mover el lápiz al primer punto\n      context.moveTo(points[0].x, points[0].y);\n\n      // Dibujar líneas a cada punto\n      points.forEach(point => {\n        context.lineTo(point.x, point.y);\n      });\n\n      // Terminar el trazo\n      context.stroke();\n    } else {\n      console.error('No hay puntos para dibujar');\n    }\n  }, [blueprint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), blueprint && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Plano: \", blueprint.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(BlueprintCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = BlueprintCanvas;\nexport default BlueprintCanvas;\nvar _c;\n$RefreshReg$(_c, \"BlueprintCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","BlueprintCanvas","blueprint","_s","canvasRef","console","log","canvas","current","context","getContext","clearRect","width","height","strokeStyle","lineWidth","points","length","beginPath","moveTo","x","y","forEach","point","lineTo","stroke","error","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["C:/Users/laura/Music/ARSW/LAB_6-ARSW/blueprints-client/src/components/BlueprintCanvas.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport '../css/BlueprintCanvas.css';\r\n\r\nconst BlueprintCanvas = ({ blueprint }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Dibujando el plano:', blueprint); // Verifica que blueprint tenga datos\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Establecer el color y el ancho de la línea\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 2;\r\n\r\n    // Comenzar a dibujar\r\n    if (blueprint && blueprint.points && blueprint.points.length > 0) {\r\n      context.beginPath();\r\n      const points = blueprint.points;\r\n\r\n      // Mover el lápiz al primer punto\r\n      context.moveTo(points[0].x, points[0].y);\r\n\r\n      // Dibujar líneas a cada punto\r\n      points.forEach(point => {\r\n        context.lineTo(point.x, point.y);\r\n      });\r\n\r\n      // Terminar el trazo\r\n      context.stroke();\r\n    } else {\r\n      console.error('No hay puntos para dibujar');\r\n    }\r\n  }, [blueprint]);\r\n\r\n  return (\r\n    <div className=\"canvas-container\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={800}\r\n        height={600}\r\n      />\r\n      {blueprint && <p>Plano: {blueprint.name}</p>} {/* Muestra el nombre del plano */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlueprintCanvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEJ,SAAS,CAAC,CAAC,CAAC;IAC/C,MAAMK,MAAM,GAAGH,SAAS,CAACI,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEvCD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;IAEpD;IACAJ,OAAO,CAACK,WAAW,GAAG,OAAO;IAC7BL,OAAO,CAACM,SAAS,GAAG,CAAC;;IAErB;IACA,IAAIb,SAAS,IAAIA,SAAS,CAACc,MAAM,IAAId,SAAS,CAACc,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAChER,OAAO,CAACS,SAAS,CAAC,CAAC;MACnB,MAAMF,MAAM,GAAGd,SAAS,CAACc,MAAM;;MAE/B;MACAP,OAAO,CAACU,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,CAACI,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAACK,CAAC,CAAC;;MAExC;MACAL,MAAM,CAACM,OAAO,CAACC,KAAK,IAAI;QACtBd,OAAO,CAACe,MAAM,CAACD,KAAK,CAACH,CAAC,EAAEG,KAAK,CAACF,CAAC,CAAC;MAClC,CAAC,CAAC;;MAEF;MACAZ,OAAO,CAACgB,MAAM,CAAC,CAAC;IAClB,CAAC,MAAM;MACLpB,OAAO,CAACqB,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF,CAAC,EAAE,CAACxB,SAAS,CAAC,CAAC;EAEf,oBACEF,OAAA;IAAK2B,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/B5B,OAAA;MACE6B,GAAG,EAAEzB,SAAU;MACfQ,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE;IAAI;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,EACD/B,SAAS,iBAAIF,OAAA;MAAA4B,QAAA,GAAG,SAAO,EAAC1B,SAAS,CAACgC,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA5CIF,eAAe;AAAAkC,EAAA,GAAflC,eAAe;AA8CrB,eAAeA,eAAe;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}